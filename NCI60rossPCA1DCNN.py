# -*- coding: utf-8 -*-
"""NCI60ross5643kolomarsitektur2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NNhpTpFePs2FVmReMs0p9cDfNE5IKWdt
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns # visualization
from sklearn.neural_network import MLPClassifier # neural network
from sklearn.model_selection import train_test_split
from sklearn import metrics
from keras.models import Sequential
from keras.layers import Dense, Conv1D, Flatten, MaxPooling1D
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers import Dropout
from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import confusion_matrix
from numpy import unique

import os

# Any results you write to the current directory are saved as output.
from google.colab import drive
drive.mount('/content/drive')

data = pd.read_excel("/content/drive/MyDrive/NCI60RosssSmotePCA.xlsx") 
data.sample(5) 

data.head(5) 


data.describe()
df_norm = data.iloc[:,0:79]
target = data[['Y']].replace(['BREAST','CNS','COLON','LEUK','MELAN','NSCLC','OVAR','PROSTATE','RENAL'],[0,1,2,3,4,5,6,7,8])
target.sample(n=5)

df = pd.concat([df_norm, target], axis=1)
#df.sample(n=5)

train, test = train_test_split(df, test_size = 0.1)
xtrain= train.iloc[:,0:79]
ytrain=train.Y
xtest= test.iloc[:,0:79]
ytest=test.Y
model = Sequential()
model.add(Conv1D(128,2, activation="relu", input_shape=(79,1)))
model.add(Dropout(0.05))
model.add(Conv1D(256,2, activation="relu"))
model.add(Dropout(0.05))
model.add(Flatten())
model.add(Dense(256, activation="relu"))
model.add(Dropout(0.25))
model.add(Dense(9, activation = 'softmax'))
model.compile(loss = 'sparse_categorical_crossentropy', 
     optimizer = "adam",               
              metrics = ['accuracy'])
model.summary()
model.fit(xtrain, ytrain, batch_size=32,epochs=1000, verbose=0)
acc = model.evaluate(xtrain, ytrain)
print("Loss:", acc[0], " Accuracy:", acc[1])

pred = model.predict(xtest)
pred_y = pred.argmax(axis=-1)

cm = confusion_matrix(ytest, pred_y)
print(cm)
#akhir

#print('Accuracy latih: %.3f' % accuracy_score(xtrain, ytrain))
print('Accuracy tes: %.4f' % accuracy_score(ytest, pred_y))
print('Recall macro: %.4f' % recall_score(ytest, pred_y, average='macro'))
print('Recall micro: %.4f' % recall_score(ytest, pred_y, average='micro'))
print('Recall weighted: %.4f' % recall_score(ytest, pred_y, average='weighted'))
print('Precision macro: %.4f' % precision_score(ytest, pred_y, average='macro'))
print('Precision micro: %.4f' % precision_score(ytest, pred_y, average='micro'))
print('Precision weighted: %.4f' % precision_score(ytest, pred_y, average='weighted'))
print('F1 macro: %.4f' % f1_score(ytest, pred_y, average='macro'))
print('F1 micro: %.4f' % f1_score(ytest, pred_y, average='micro'))
print('F1 weighted: %.4f' % f1_score(ytest, pred_y, average='weighted'))
#print('AUCROC: %.4f' % roc_auc_score(ytest, pred_y,average='average'))

pred1 = model.predict(xtrain)
pred1_y = pred1.argmax(axis=-1)

cm1 = confusion_matrix(ytrain, pred1_y)
print(cm1)
#print('Accuracy latih: %.3f' % accuracy_score(xtrain, ytrain))
print('Accuracy latih: %.4f' % accuracy_score(ytrain, pred1_y))
print('Recall macro: %.4f' % recall_score(ytrain, pred1_y, average='macro'))
print('Recall micro: %.4f' % recall_score(ytrain, pred1_y, average='micro'))
print('Recall weighted: %.4f' % recall_score(ytrain, pred1_y, average='weighted'))
print('Precision macro: %.4f' % precision_score(ytrain, pred1_y, average='macro'))
print('Precision micro: %.4f' % precision_score(ytrain, pred1_y, average='micro'))
print('Precision weighted: %.4f' % precision_score(ytrain, pred1_y, average='weighted'))
print('F1 macro: %.4f' % f1_score(ytrain, pred1_y, average='macro'))
print('F1 micro: %.43f' % f1_score(ytrain, pred1_y, average='micro'))
print('F1 weighted: %.4f' % f1_score(ytrain, pred1_y, average='weighted'))